;; -*- lisp -*-

(setf *system-external-format* 'utf-8)

(in-package :stumpwm)

(set-prefix-key (kbd "M-t"))
(define-key *root-map* (kbd "ESC") "abort")

;; terminal
(define-key *root-map* (kbd "c") "exec urxvtc")
(define-key *root-map* (kbd "C-c") "exec urxvtc")

(defun maybe-external (group-name)
  (cl-ppcre:register-groups-bind (nil host nil port-or-host)
   ("((.*)#)?((.*):)?" group-name)
   (cond ((and host port-or-host) (list host port-or-host))
	 (port-or-host (list port-or-host nil))
	 (t '(nil nil)))))

(defcommand maybe-external-terminal ()
  ()
  (run-shell-command 
   (destructuring-bind (host port) (maybe-external (group-name (current-group)))
     (cond ((and host port) (format nil "urxvt -tn xterm -e ssh ~a -p ~a" host port))
	   (host (format nil "urxvt -tn xterm -e ssh ~a" host))
	   (t "urxvt")))))

(define-key *root-map* (kbd  "M-c") "maybe-external-terminal")

;; emacs
(defcommand maybe-external-emacs ()
  ()
  (run-shell-command 
   (destructuring-bind (host port) (maybe-external (group-name (current-group)))
     (cond ((and host port) (format nil "emacsclient -c /ssh:~a#~a:" host port))
	   (host (format nil "emacsclient -c /ssh:~a:" host))
	   (t "emacsclient -c")))))

(define-key *root-map* (kbd "M-e") "maybe-external-emacs")

;; surfraw
(ignore-errors (load-module "surfraw"))

;; screen locking
(defparameter lock-prog "i3lock -e -i bsod.png")
(defcommand lock
    (suspend-p) ((:y-or-n "Suspend?" ))
  (run-shell-command lock-prog)
  (when (car suspend-p) (run-shell-command "sudo systemctl suspend")))
(define-key *root-map* (kbd "M-s") "lock n")
(define-key *root-map* (kbd "M-S") "lock y")

;; external monitor toggle
(defun external-monitor (enable-disable)
  (run-shell-command
   (format nil "xrandr --output HDMI1 --~:[auto~;off~]" (equal enable-disable :disable)))
  (with-open-file (asound-config (merge-pathnames ".asoundrc" (user-homedir-pathname))
				 :direction :output
				 :if-exists :supersede)
    (format asound-config "pcm.!default ~:[pcm.hdmi~;pcm.headphones~]" (equal enable-disable :disable))))
(defcommand enable-external-monitor () () (external-monitor :enable))
(defcommand disable-external-monitor () () (external-monitor :disable))

;; completing file search
(require 'cl-ppcre)
(defun remove-prefix (string prefix)
  (cl-ppcre:regex-replace prefix  string ""))
(defun strip-home-dir (directory-listing)
  (let ((home-dir (namestring (user-homedir-pathname))))
    (mapcar (lambda (path) (remove-prefix (namestring path) home-dir))
	    directory-listing)))
(defun make-completions (partial-path)
   (strip-home-dir (directory (concatenate 'string (namestring (user-homedir-pathname)) partial-path 
					   (if (and (null (cl-ppcre:scan "\\*" partial-path)) (probe-file (concatenate 'string partial-path "/")))
					       "/*.*" "*.*")))))
(defcommand find-file () ()
  (let ((maybe-file (completing-read (current-screen) "open a file with emacs: " #'make-completions)))
    (when maybe-file
      (run-shell-command (format nil "emacsclient -c ~s" maybe-file)))))
(define-key *root-map* (kbd "e") "find-file")

;; roslisp completing file search TODO: maybe some other time
	    

;; make the next and previous behave as if frames had tabs
(define-key *root-map* (kbd "M-n") "next-in-frame")
(define-key *root-map* (kbd "M-p") "prev-in-frame")

;; movement keys
(define-key *top-map* (kbd "M-k") "move-focus up")
(define-key *top-map* (kbd "M-K") "move-window up")
(define-key *top-map* (kbd "M-j") "move-focus down")
(define-key *top-map* (kbd "M-J") "move-window down")
(define-key *top-map* (kbd "M-h") "move-focus left")
(define-key *top-map* (kbd "M-H") "move-window left")
(define-key *top-map* (kbd "M-l") "move-focus right")
(define-key *top-map* (kbd "M-L") "move-window right")

;; dmenu
(define-key *root-map* (kbd "p") "exec dmenu_run")

;; surfraw bindings
(define-key *root-map* (kbd "d") "sr-duckduckgo")
(define-key *root-map* (kbd "W") "sr-W")

;; colours
(set-fg-color 'grey)
(set-bg-color 'black)
(set-focus-color 'red)
(set-border-color 'red)

;; message window
(setf *message-window-gravity* :top-left)
(setf *input-window-gravity* :top-left)

;; Fonts
(set-font "-xos4-Terminus-normal-normal-normal-*-9-*-*-*-c-80-iso10646-1")

;; destop init
(run-shell-command "feh --bg-fill bg.jpg")

(defmacro re-cond (string-to-match &rest clauses)
  (let ((res (gensym "res"))
	(to-match (gensym "to-match"))
	(it  (gensym "it")))
    `(let ((,to-match ,string-to-match))
       (loop for ,res in (list ,@(loop for clause in clauses
				   collect (destructuring-bind (re register-bingings . body) clause 
					     `(lambda () (cl-ppcre:register-groups-bind ,register-bingings 
							     (,re ,to-match) ,@body)))))
	  for ,it = (funcall ,res)
	  unless (null ,it)
	  return ,it))))

(setf *mode-line-position* :bottom)
(setf stumpwm:*screen-mode-line-format* (list "[%n] [ " '(:eval (re-cond (stumpwm:run-shell-command "acpi" t)
								 ("\\w* 0: (\\w*), \\w*%, (\\d*:\\d*:\\d*)"
								  (charging-p time) 
								  (format nil "~:[-~;+~]~a" (equal charging-p "Charging") time))
								 ("\\w* 0: (\\w*), \\w*%,"
								  (charging-p) 
								  (format nil "~:[-~;+~]" (equal charging-p "Charging")))
								 ("\\w* 0: Full," ()
								  "Full")))
					      " | " '(:eval (stumpwm:run-shell-command "date | tr -d \\\\n" t)) "] %W"))
(toggle-mode-line (current-screen) (current-head)) ;
